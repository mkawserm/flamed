// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

package admin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	pb "github.com/mkawserm/flamed/pkg/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserRequest struct {
	ClusterID            uint64   `protobuf:"varint,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *UserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpsertUserRequest struct {
	ClusterID            uint64   `protobuf:"varint,1,opt,name=clusterID,proto3" json:"clusterID,omitempty"`
	User                 *pb.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertUserRequest) Reset()         { *m = UpsertUserRequest{} }
func (m *UpsertUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertUserRequest) ProtoMessage()    {}
func (*UpsertUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}

func (m *UpsertUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpsertUserRequest.Unmarshal(m, b)
}
func (m *UpsertUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpsertUserRequest.Marshal(b, m, deterministic)
}
func (m *UpsertUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertUserRequest.Merge(m, src)
}
func (m *UpsertUserRequest) XXX_Size() int {
	return xxx_messageInfo_UpsertUserRequest.Size(m)
}
func (m *UpsertUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertUserRequest proto.InternalMessageInfo

func (m *UpsertUserRequest) GetClusterID() uint64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *UpsertUserRequest) GetUser() *pb.User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*UserRequest)(nil), "admin.UserRequest")
	proto.RegisterType((*UpsertUserRequest)(nil), "admin.UpsertUserRequest")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x1b, 0xa9, 0x9a, 0x4e, 0x4e, 0x0e, 0x1e, 0x42, 0xe8, 0xa1, 0xe4, 0x54, 0x2f, 0x1b,
	0xa8, 0x17, 0x4f, 0x82, 0x58, 0x28, 0x9e, 0x2c, 0x0b, 0x7d, 0x80, 0x4d, 0x3b, 0xd6, 0xd2, 0x6c,
	0x76, 0xdd, 0xd9, 0xc5, 0xc7, 0xf2, 0x15, 0x25, 0x5b, 0x6d, 0x45, 0x08, 0xf4, 0xf8, 0x0d, 0xfb,
	0xfb, 0xfe, 0x2c, 0x64, 0x6a, 0xa3, 0x77, 0xad, 0xb0, 0xce, 0x78, 0x83, 0x97, 0x51, 0x14, 0x62,
	0xbb, 0xf3, 0xef, 0xa1, 0x16, 0x6b, 0xa3, 0x2b, 0xbd, 0x57, 0x9f, 0x4c, 0x4e, 0x57, 0x6f, 0x8d,
	0xd2, 0xb4, 0xa9, 0xec, 0x7e, 0x5b, 0xd9, 0xfa, 0x47, 0x1d, 0xb0, 0x72, 0x01, 0xd9, 0x8a, 0xc9,
	0x49, 0xfa, 0x08, 0xc4, 0x1e, 0xc7, 0x30, 0x5a, 0x37, 0x81, 0x3d, 0xb9, 0x97, 0x79, 0x9e, 0x4c,
	0x92, 0xe9, 0x50, 0x9e, 0x0e, 0x58, 0x40, 0x1a, 0x98, 0x5c, 0xab, 0x34, 0xe5, 0x17, 0x93, 0x64,
	0x3a, 0x92, 0x47, 0x5d, 0xbe, 0xc2, 0xcd, 0xca, 0x32, 0x39, 0x7f, 0xbe, 0xdd, 0x18, 0x86, 0x1d,
	0x1e, 0xad, 0xb2, 0x59, 0x2a, 0x6c, 0x2d, 0x22, 0x1c, 0xaf, 0xb3, 0xaf, 0x04, 0xd2, 0xa7, 0x6e,
	0x93, 0x5c, 0x3e, 0xe3, 0x1d, 0x5c, 0x2f, 0x28, 0x5a, 0x23, 0x8a, 0xc3, 0xec, 0x3f, 0x39, 0xc5,
	0x91, 0x2d, 0x07, 0xf8, 0x08, 0x70, 0x2a, 0x82, 0xf9, 0xef, 0xeb, 0xff, 0xdd, 0x8a, 0xdb, 0x8e,
	0x59, 0x3a, 0x63, 0x0d, 0xab, 0x46, 0x12, 0x5b, 0xd3, 0x32, 0x95, 0x03, 0x7c, 0x00, 0x98, 0x53,
	0x43, 0x9e, 0x7a, 0xd3, 0x7a, 0xc8, 0xfa, 0x2a, 0x7e, 0xe9, 0xfd, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xad, 0x71, 0x45, 0xb4, 0x98, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminRPCClient is the client API for AdminRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminRPCClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*pb.User, error)
	UpsertUser(ctx context.Context, in *UpsertUserRequest, opts ...grpc.CallOption) (*pb.ProposalResponse, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*pb.ProposalResponse, error)
}

type adminRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminRPCClient(cc grpc.ClientConnInterface) AdminRPCClient {
	return &adminRPCClient{cc}
}

func (c *adminRPCClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*pb.User, error) {
	out := new(pb.User)
	err := c.cc.Invoke(ctx, "/admin.AdminRPC/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRPCClient) UpsertUser(ctx context.Context, in *UpsertUserRequest, opts ...grpc.CallOption) (*pb.ProposalResponse, error) {
	out := new(pb.ProposalResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminRPC/UpsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminRPCClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*pb.ProposalResponse, error) {
	out := new(pb.ProposalResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminRPC/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminRPCServer is the server API for AdminRPC service.
type AdminRPCServer interface {
	GetUser(context.Context, *UserRequest) (*pb.User, error)
	UpsertUser(context.Context, *UpsertUserRequest) (*pb.ProposalResponse, error)
	DeleteUser(context.Context, *UserRequest) (*pb.ProposalResponse, error)
}

// UnimplementedAdminRPCServer can be embedded to have forward compatible implementations.
type UnimplementedAdminRPCServer struct {
}

func (*UnimplementedAdminRPCServer) GetUser(ctx context.Context, req *UserRequest) (*pb.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedAdminRPCServer) UpsertUser(ctx context.Context, req *UpsertUserRequest) (*pb.ProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUser not implemented")
}
func (*UnimplementedAdminRPCServer) DeleteUser(ctx context.Context, req *UserRequest) (*pb.ProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterAdminRPCServer(s *grpc.Server, srv AdminRPCServer) {
	s.RegisterService(&_AdminRPC_serviceDesc, srv)
}

func _AdminRPC_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRPCServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminRPC/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRPCServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRPC_UpsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRPCServer).UpsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminRPC/UpsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRPCServer).UpsertUser(ctx, req.(*UpsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminRPC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminRPCServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminRPC/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminRPCServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminRPC",
	HandlerType: (*AdminRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AdminRPC_GetUser_Handler,
		},
		{
			MethodName: "UpsertUser",
			Handler:    _AdminRPC_UpsertUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AdminRPC_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
